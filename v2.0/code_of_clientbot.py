import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from pymongo import MongoClient
import urllib.parse
import json
import requests
import time

from datetime import datetime, timedelta, timezone

password = urllib.parse.quote_plus('7ZfrNV3ifnWf2oor')
client = MongoClient('mongodb+srv://coolpoint:%s@coolpoint-cluster.5g2rs.mongodb.net/?retryWrites=true&w=majority' % (password))

base = client['base_of_peoples']
base_teachers = base['teachers']
base_students = base['students']

blanks = {
    'welcome' : '–ö—Ä–∞—Ç–∫–æ –æ–±–æ –º–Ω–µ.\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä\n–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—ã CoolPoint.\n–ó–∞—á–µ–º —è –í–∞–º –Ω—É–∂–µ–Ω? ü§î\n–ö–æ–Ω—Ü–µ–ø—Ü–∏—è —à–∫–æ–ª—ã CoolPoint - "–£—á–∏—Ç—å—Å—è –ª–µ–≥–∫–æ!".\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —è –≤–Ω–æ—à—É –Ω–µ–±–æ–ª—å—à–æ–π, –Ω–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —É–¥–æ–±—Å—Ç–≤–∞ —É—Ä–æ–∫–æ–≤. –ö–æ—Ä–æ—Ç–∫–æ –≥–æ–≤–æ—Ä—è, —è –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–≤—è–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ —É—á–µ–Ω–∏–∫–∞–º–∏!)\n–ß—Ç–æ —è —É–º–µ—é? ‚òùÔ∏è\n–ù–∞–ø–æ–º–∏–Ω–∞—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–∞—Ö;\n–ü—Ä–∏—Å—ã–ª–∞—é –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è;\n–°–ª–µ–∂—É –∑–∞ –æ—Å—Ç–∞—Ç–∫–æ–º —É—Ä–æ–∫–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞;\n–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –æ –Ω–æ–≤–æ—Å—Ç—è—Ö —à–∫–æ–ª—ã –∏ –Ω–µ —Ç–æ–ª—å–∫–æ;\n–Ø —Ç–æ–∂–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å, –∞ –∑–Ω–∞—á–∏—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏! üòå',
    'plug' : '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!‚ò∫Ô∏è\n\n–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞ —à–∫–æ–ª—ã A3artSchool. \n–ï—Å–ª–∏ –≤—ã —á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –í—ã –æ–¥–Ω–∏ –∏–∑ –ø–µ—Ä–≤—ã—Ö, –∫—Ç–æ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ —ç—Ç—É —Å–∏—Å—Ç–µ–º—É. \n–°–µ–π—á–∞—Å –∏–¥—ë—Ç —ç—Ç–∞–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –í—ã —Å—Ç–∞–ª–∫–Ω–µ—Ç–µ—Å—å —Å –ª—é–±—ã–º–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è–º–∏ –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—è–º–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏—Ç–µ –í–ª–∞–¥–∏—Å–ª–∞–≤—É (@A3artt). \n–°–ø–∞—Å–∏–±–æ –í–∞–º –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–µ—Ä–∏–æ–¥–µ! \n\n–ß—Ç–æ —è —É–º–µ—é? ‚òùÔ∏è\nüìå–ù–∞–ø–æ–º–∏–Ω–∞—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–∞—Ö;\nüìå–ü—Ä–∏—Å—ã–ª–∞—é –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è;\nüìå–°–ª–µ–∂—É –∑–∞ –æ—Å—Ç–∞—Ç–∫–æ–º —É—Ä–æ–∫–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞;\nüìå–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –æ –Ω–æ–≤–æ—Å—Ç—è—Ö —à–∫–æ–ª—ã –∏ –Ω–µ —Ç–æ–ª—å–∫–æ;\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏! üòâ',
    'not_username_in_base':'–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –±–æ—Ç —à–∫–æ–ª—ã A3artSchool. ‚ò∫Ô∏è\n–ú—ã –≤—Ä–æ–¥–µ –µ—â—ë –Ω–µ –∑–Ω–∞–∫–æ–º—ã) \n–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —É—Ä–æ–∫, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ –í–ª–∞–¥–∏—Å–ª–∞–≤—É –æ–± —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ. \n\n–ï—Å–ª–∏ –∂–µ —Å –í–∞–º–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —ç—Ç–∏–º –±–æ—Ç–æ–º, —Ç–æ —É –í–∞—Å –µ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫ —Å–æ —Å–∫–∏–¥–∫–æ–π 10%! üòâ\n–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫ –Ω–∞–ø–∏—à–∏—Ç–µ –í–ª–∞–¥–∏—Å–ª–∞–≤—É: @A3artt\n–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É: +79080905277'
}



    
API_TOKEN = '5473320366:AAEwnENs-cyjGA5pBJFA-qpeHiU-v4B2_5A'

logging.basicConfig(level=logging.INFO)

class States(StatesGroup):
    NEWSLETTER = State()

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

access = ['VuplesOwl', 'A3artt']




dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(commands='start',state='*')
async def start_handler(msg: types.Message):

    user_id = str(msg.from_user.id)
    username = '@'+str(msg.from_user.username)
    
    print(user_id)
    print(username)
    
#     item_student_username = base_students.find({'username':username})
#     item_student_parents_username = base_students.find({'parents_username':username})
    
    with open('is_in_file.txt','r') as data: 
        text = data.read()
        if text == '': is_in_file = {}
        else: is_in_file = json.loads(text)
    with open('deleted_user_ids.txt','r') as data: 
        text = data.read()
        if text == '': deleted_user_ids = {}
        else: deleted_user_ids = json.loads(text)
        
    # for item in item_student_username:
    #     number = item['_id']
    # for item in item_student_parents_username:
    #     number = item['_id']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫"]
    buttons_2 = ["–ë–∞–ª–∞–Ω—Å", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]
    keyboard.add(*buttons)
    keyboard.row(*buttons_2)
    
    numbers = []
    for number in is_in_file:
        for user_id_file in is_in_file[number]:
            if user_id == user_id_file: numbers.append(number)
        
    if numbers == [] and deleted_user_ids.get(user_id) == None:
        await bot.send_message(user_id,blanks['not_username_in_base'])
        return
    elif numbers == [] and deleted_user_ids.get(user_id)!=None:
        for deleted_number in deleted_user_ids[user_id]:
            is_in_file[deleted_number].append(user_id)
            deleted_user_ids.update({user_id:[]})

            with open('is_in_file.txt','w') as data: 
                data.write(json.dumps(is_in_file))
            with open('deleted_user_ids.txt','w') as data: 
                data.write(json.dumps(deleted_user_ids))
            
        
        await bot.send_message(user_id,blanks['plug'], reply_markup=keyboard)  
    else: 
        await bot.send_message(user_id,blanks['plug'], reply_markup=keyboard)  
    
    
    #not_username_in_base
    # try: print(number)
    # except:
    #     await bot.send_message(user_id,blanks['not_username_in_base'])
    #     print(number)
        
        
#     try:
#         user_ids = is_in_file[number]
#         is_in_file_flug = True 
#     except: is_in_file_flug = False
    
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     buttons = ["–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫"]
#     buttons_2 = ["–ë–∞–ª–∞–Ω—Å", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]
#     keyboard.add(*buttons)
#     keyboard.row(*buttons_2)
    
#     # is in db but not in the file
#     if is_in_file_flug == False:
#         number_id = {number: [user_id]}
#         is_in_file.update(number_id)
#         with open('is_in_file.txt','w') as data: 
#             data.write(json.dumps(is_in_file))
#         await bot.send_message(user_id,blanks['plug'], reply_markup=keyboard)  
        
#     #is in file
#     elif is_in_file_flug == True:
#         user_ids = set(user_ids)
#         user_ids.add(user_id)
#         user_ids = list(user_ids)
#         number_ids = {number: user_ids}
        
#         is_in_file.update(number_ids)
#         with open('is_in_file.txt','w') as data: 
#             data.write(json.dumps(is_in_file))
#         await bot.send_message(user_id,blanks['plug'], reply_markup=keyboard)  
        


    # await msg.reply(blanks['plug'], reply_markup=keyboard)

@dp.message_handler(text=['–ë–∞–ª–∞–Ω—Å','–±–∞–ª–∞–Ω—Å'])
async def start_handler(msg: types.Message):

    user_id = str(msg.from_user.id)
    print(user_id)
    
    with open('is_in_file.txt','r') as data: 
        text = data.read()
        if text == '': is_in_file = {}
        else: is_in_file = json.loads(text)

    numbers = []
    for number in is_in_file:
        for user_id_file in is_in_file[number]:
            if user_id == user_id_file: numbers.append(number)
                
    # print(numbers)            
    # number = +79512572202
    balences = {}
    for number in numbers:
        uri = 'https://api.yclients.com/api/v1/loyalty/abonements/'
        headers = {"Accept" : "application/vnd.yclients.v2+json","Content-Type" : "application/json","Authorization" : "Bearer uw2xhhghwja3kbkmadh4, User f774e3eb777a5244ccbe927cf8c6047f"}
        params = {'company_id' : '651183','phone' : number}
        response = json.loads(requests.get(uri, params=params,headers=headers).text)['data']
        
        if response == []:
            balences.update({number:None})
            # anwser = '–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–±–æ–Ω–∏–º–µ–Ω—Ç–∞.\n–û—á–µ–Ω—å —Å–æ–≤–µ—Ç—É—é —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ!\n–í–µ–¥—å —Ç–∞–∫ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10% –Ω–∞ –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –í–ª–∞–¥–∏—Å–ª–∞–≤—É: @A3artt'
            # await bot.send_message(user_id,answer)
        else:
            balences.update({number:{}})
    #         answer = '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:\n'
            for balance in response:
                subject = balance['balance_string'].split(',')[0]
                balance_of_subject = str(balance['united_balance_services_count'])
                
                # balences.update({number: {subject:balance_of_subject}})

                balences[number].update({subject:balance_of_subject})

                # answer += subject+': '+balance_of_subject+'\n'
    # #         await bot.send_message(user_id,answer)
    #         print(balences[number][subject])
    # print(balences)
    if len(numbers) == 1:
        answer = '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:\n'
        for balance_of_subject in balences[number]:
            answer += balance_of_subject+': '+balences[number][balance_of_subject]+'\n'
    else:
        answer = '*–°–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤*\n'
        for number in numbers:
            item_student = base_students.find({'_id':number})
            name = ''
            for item in item_student:
                name += item['full_name'].split(' ')[1]
            answer += name+':\n'
            
            if balences[number] != None:
                for balance_of_subject in balences[number]:
                    answer += '¬∑ '+balance_of_subject+': '+balences[number][balance_of_subject]+'\n'
            else:
                answer += '  –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'
    await bot.send_message(user_id,answer,parse_mode='Markdown')
                    

@dp.message_handler(text=['–ö–æ–Ω—Ç–∞–∫—Ç—ã','–∫–æ–Ω—Ç–∞–∫—Ç—ã'])
async def start_handler(msg: types.Message):

    user_id = str(msg.from_user.id)
    print(user_id)
    answer = "–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n@A3artt\n+79080905277"
    
    await bot.send_message(user_id,answer)
    
@dp.message_handler(text=['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è','–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'])
async def start_handler(msg: types.Message):

    user_id = str(msg.from_user.id)
    print(user_id)
    
    with open('is_in_file.txt','r') as data: 
        text = data.read()
        if text == '': is_in_file = {}
        else: is_in_file = json.loads(text)
        
    with open('deleted_user_ids.txt','r') as data: 
        text = data.read()
        if text == '': deleted_user_ids = {}
        else: deleted_user_ids = json.loads(text)
        
    deleted_user_ids.update({user_id:[]})
    for number in is_in_file:
        user_ids = is_in_file[number]

        for user_id_file in user_ids:
            if user_id_file == str(user_id): 
                deleted_user_ids[user_id].append(number)
                # deleted_numbers.append(number)
  
                user_ids.pop(user_ids.index(user_id_file))
                is_in_file.update({number:user_ids})
                with open('is_in_file.txt','w') as data: 
                    data.write(json.dumps(is_in_file))
                    
    with open('deleted_user_ids.txt','w') as data: 
        data.write(json.dumps(deleted_user_ids))
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["/start"]
    keyboard.add(*buttons)

    answer='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∞–º –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∏—Ö –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start'    
    await bot.send_message(user_id,answer, reply_markup=keyboard)
                

                
@dp.message_handler(text=['–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫','c–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫'])
async def start_handler(msg: types.Message):

    user_id = str(msg.from_user.id)
    print(user_id)     
    
    # get number
    with open('is_in_file.txt','r') as data: 
        text = data.read()
        if text == '': is_in_file = {}
        else: is_in_file = json.loads(text)

    numbers = []
    for number in is_in_file:
        for user_id_file in is_in_file[number]:
            if user_id == user_id_file: numbers.append(number)
                
    # number = '+79124091315' 
    users_records = {}
    for number in numbers:
        # find the recent record   
        password = urllib.parse.quote_plus('7ZfrNV3ifnWf2oor')
        client = MongoClient('mongodb+srv://coolpoint:%s@coolpoint-cluster.5g2rs.mongodb.net/?retryWrites=true&w=majority' % (password))

        uri = "https://api.yclients.com/api/v1/records/651183"
        headers = {"Accept" : "application/vnd.yclients.v2+json","Content-Type" : "application/json","Authorization" : "Bearer uw2xhhghwja3kbkmadh4, User f774e3eb777a5244ccbe927cf8c6047f"}
        params = {'start_date' :  str(datetime.today().day)+'.'+str(datetime.today().month)+'.'+str(datetime.today().year)}

        records_crm = json.loads(requests.get(uri, params=params, headers=headers).text)['data']

        with open('records_file.txt','r') as text: 
            data = text.read()
            if data == '': records_file = {}
            else: records_file = json.loads(data)

        is_record = False
        for record in reversed(records_crm):
            record_id = str(record['id'])

            if '+'+str(record['client']['phone']) == number:
                if record['attendance'] == 0:
                    is_record = True
                    break

        if records_file.get(record_id) == None:
            users_records.update({number:None})
            # answer = '–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–µ –Ω–∞—à–µ–ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π üò∂\n–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é!'
            # await bot.send_message(user_id,answer)
            continue

        record_file = records_file[record_id]
        crm_time_start = datetime.fromisoformat(record_file['crm_time_start'])
        students_time_zone = record_file['students_time_zone']
        # crm_timezone = int(record_file['crm_timezone'])

        students_time_start = crm_time_start + timedelta(hours=int(students_time_zone))

        now = datetime.now() + timedelta(hours=int(students_time_zone))

        print(students_time_start,now)

        if students_time_start < now or record_file['is_deleted'] or is_record == False:
            users_records.update({number:None})
            # answer = '–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–µ –Ω–∞—à–µ–ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π üò∂\n–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é!'
            # await bot.send_message(user_id,answer)
            continue

        if len(str(students_time_start.minute)) == 1:
            minute = '0'+str(students_time_start.minute)
        else: minute = str(students_time_start.minute)

        beautiful_time = str(students_time_start.hour)+':'+minute

        date = str(students_time_start.day) + '.' + str(students_time_start.month)

        if len(str(students_time_start.month)) == 1:
            month = '0'+str(students_time_start.month)
        else: month = str(students_time_start.month)

        date = str(students_time_start.day) + '.' + month

        #send messege
        if students_time_start.day - now.day == 0: recent = '—Å–µ–≥–æ–¥–Ω—è'
        elif students_time_start.day - now.day == 1: recent = '–∑–∞–≤—Ç—Ä–∞'
        elif students_time_start.day - now.day == 2: recent = '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞'
        else: recent = False

        weekday = students_time_start.weekday()
        if weekday == 0 : weekday = '–≤ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
        if weekday == 1 : weekday = '–≤–æ –í—Ç–æ—Ä–Ω–∏–∫'
        if weekday == 2 : weekday = '–≤ –°—Ä–µ–¥—É'
        if weekday == 3 : weekday = '–≤ –ß–µ—Ç–≤–µ—Ä–≥'
        if weekday == 4 : weekday = '–≤ –ü—è—Ç–Ω–∏—Ü—É'
        if weekday == 5 : weekday = '–≤ –°—É–±–±–æ—Ç—É'
        if weekday == 6 : weekday = '–≤ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'

        answer = '–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é '
        if recent==False:
            answer += weekday + ', ' + date + ' –≤ ' + beautiful_time 
        else:
            answer += recent + ' –≤ ' + beautiful_time
            
        users_records.update({number:answer})
        # await bot.send_message(user_id,answer)
    answer = ''
    if len(numbers) != 1:
        for number in users_records:
            item_student = base_students.find({'_id':number})
            name = ''
            for item in item_student:
                name += item['full_name'].split(' ')[1]
            answer += name+':\n'
            
            if users_records[number] != None:
                answer += '¬∑ '+users_records[number]+'\n'
            else:
                answer += '¬∑ –£—Ä–æ–∫ –µ—â–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω\n'
    else:
        for number in users_records:
            answer = users_records[number]
    await bot.send_message(user_id,answer,parse_mode='Markdown')
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
@dp.message_handler(text=['newsletter','Newsletter'])
async def newsletter(msg: types.Message):

    user_id = str(msg.from_user.id)
    
    if msg.from_user.username not in access : return 

    state = dp.current_state(user=user_id)
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["/cancel"]
    keyboard.add(*buttons)
    await bot.send_message(msg.from_user.id, '–ü—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–º –∂–µ –≤–∏–¥–µ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.', reply_markup=keyboard)
    await States.NEWSLETTER.set()
    


    
@dp.message_handler(state=States.NEWSLETTER,content_types=types.ContentType.ANY)
async def newsletter_2(msg: types.Message):
    state = dp.current_state(user=msg.from_user.id)
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫"]
    buttons_2 = ["–ë–∞–ª–∞–Ω—Å", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]
    keyboard.add(*buttons)
    keyboard.row(*buttons_2)
    
    if msg.text=='/cancel': 
        await state.finish()
        await msg.reply("–í–≤–æ–¥ —Å–±—Ä–æ—à–µ–Ω, –º–æ–∂–µ—à—å —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è", reply_markup=keyboard)
        return
    
    
    with open('is_in_file.txt','r') as data: 
        text = data.read()
        if text == '': is_in_file = {}
        else: is_in_file = json.loads(text)

        
        
    ids = []    
    for number in is_in_file:
        user_ids = is_in_file[number]

        for user_id in user_ids:
            ids.append(user_id)
 
    for user_id in ids:
        time.sleep(0.1)
        if msg.photo:
            await bot.send_photo(user_id, photo=msg.photo[-1].file_id,caption=msg.caption)
        elif msg.video:
            await bot.send_video(user_id, video=msg.video.file_id,caption=msg.caption)
        elif msg.text:
            await bot.send_message(user_id, msg.text)
    

    await bot.send_message(msg.from_user.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º, –∫—Ç–æ –Ω–∞–∂–∞–ª /start', reply_markup=keyboard)
    
    await state.finish()
    
    
    
    
    
    
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
