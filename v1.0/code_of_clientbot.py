import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from pymongo import MongoClient
import urllib.parse
import json

password = urllib.parse.quote_plus('7ZfrNV3ifnWf2oor')
client = MongoClient('mongodb+srv://coolpoint:%s@coolpoint-cluster.5g2rs.mongodb.net/?retryWrites=true&w=majority' % (password))

base = client['base_of_peoples']
base_teachers = base['teachers']
base_students = base['students']

blanks = {
    'welcome' : '–ö—Ä–∞—Ç–∫–æ –æ–±–æ –º–Ω–µ.\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä\n–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—ã CoolPoint.\n–ó–∞—á–µ–º —è –í–∞–º –Ω—É–∂–µ–Ω? ü§î\n–ö–æ–Ω—Ü–µ–ø—Ü–∏—è —à–∫–æ–ª—ã CoolPoint - "–£—á–∏—Ç—å—Å—è –ª–µ–≥–∫–æ!".\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —è –≤–Ω–æ—à—É –Ω–µ–±–æ–ª—å—à–æ–π, –Ω–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —É–¥–æ–±—Å—Ç–≤–∞ —É—Ä–æ–∫–æ–≤. –ö–æ—Ä–æ—Ç–∫–æ –≥–æ–≤–æ—Ä—è, —è –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–≤—è–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ —É—á–µ–Ω–∏–∫–∞–º–∏!)\n–ß—Ç–æ —è —É–º–µ—é? ‚òùÔ∏è\n–ù–∞–ø–æ–º–∏–Ω–∞—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–∞—Ö;\n–ü—Ä–∏—Å—ã–ª–∞—é –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è;\n–°–ª–µ–∂—É –∑–∞ –æ—Å—Ç–∞—Ç–∫–æ–º —É—Ä–æ–∫–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞;\n–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –æ –Ω–æ–≤–æ—Å—Ç—è—Ö —à–∫–æ–ª—ã –∏ –Ω–µ —Ç–æ–ª—å–∫–æ;\n–Ø —Ç–æ–∂–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å, –∞ –∑–Ω–∞—á–∏—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏! üòå',
    'plug' : '–£ –±–æ—Ç–∞ —Ç–æ–∂–µ –±—ã–≤–∞—é—Ç –∫–∞–Ω–∏–∫—É–ª—ã! üòå\n–ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –±—É–¥—É —Å –í–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏! üòâ'
}



    
API_TOKEN = '5473320366:AAEwnENs-cyjGA5pBJFA-qpeHiU-v4B2_5A'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(commands='start')
async def start_handler(msg: types.Message):

    user_id = msg.from_user.id
    username = '@'+msg.from_user.username
    
    print(user_id)
    print(username)
    
    item_student = base_students.find({'username':username})
    
    with open('is_in_file.txt','r') as data: 
        if data.read() == '': is_in_file = {}
        else: is_in_file = json.loads(data.read())
        
    if is_in_file.get(user_id) == None:
        for item in item_student:
            number = item['_id']
            id_number = {user_id: number}
            is_in_file.update(id_number)
            with open('is_in_file.txt','w') as data: 
                data.write(json.dumps(is_in_file))
    else:
        number = is_in_file[user_id]
        
    print(number)    
    
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     buttons = ["–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", "–ë–∞–ª–∞–Ω—Å"]
#     keyboard.add(*buttons)

    # await msg.reply(blanks['plug'], reply_markup=keyboard)
    await msg.reply(blanks['plug'])


    
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
